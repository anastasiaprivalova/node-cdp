swagger: "2.0"
info:
  version: "1.0.0."
  title: "Node CDP"
  description: "This is a sample Node CDP server"
  contact:
    email: "anastasia.privalova23@mail.ru"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: localhost:8080
tags:
- name: "product"
  description: "Product info with users review"
- name: "user"
  description: "Operations with user accounts"
- name: "city"
  description: "Info about cities location"
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /products:
    x-swagger-router-controller: products
    get:
      tags:
      - "product"
      summary: "Get all products"
      operationId: "getAllProducts"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      operationId: "createProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Product"
  /products/{productId}:
    x-swagger-router-controller: products
    get:
      tags:
      - "product"
      summary: "Get product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Product not found"
    put:
      tags:
      - "product"
      summary: "Update an existing product or create new if not exists"
      operationId: "updateProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to update / create"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Product object that needs to be updated / added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Product"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      operationId: "deleteProduct"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "Product ID to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Product not found"
  /products/{productId}/revews:
    x-swagger-router-controller: products
    get:
      tags:
      - "product"
      summary: "Get reviews by product ID"
      operationId: "getProductReviews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to get reviews"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        404:
          description: "Product not found"
  /users:
    x-swagger-router-controller: users
    get:
      tags:
      - "user"
      summary: "Get all users"
      operationId: "getAllUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "user"
      summary: "Create user"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
  /users/{userId}:
    x-swagger-router-controller: users
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The ID of user that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "If user wasn't found by provided ID, then the new will be created"
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User that need to be updated / created defined by ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The ID which indicates the user that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
  /cities:
    x-swagger-router-controller: cities
    get:
      tags:
      - "city"
      summary: "Returns all cities"
      operationId: "getAllCities"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
    post:
      tags:
      - "city"
      summary: "Add new city"
      operationId: "createCity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "City object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/City"
  /cities/{cityId}:
    x-swagger-router-controller: cities
    put:
      tags:
      - "city"
      summary: "Update an existing city or create new if not exists"
      operationId: "updateCity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "ID of city to update / create"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "City object that needs to be updated / added to the store"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/City"
    delete:
      tags:
      - "city"
      summary: "Deletes a city"
      operationId: "deleteCity"
      produces:
      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "City ID to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/City"
        404:
          description: "City not found"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Review:
    type: "object"
    properties:
      userId:
        type: "string"
        example: "1"
      text:
        type: "string"
        example: "Not Bad"
    example:
      text: "Not Bad"
      userId: "1"
  Product:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      reviews:
        type: "array"
        items:
          $ref: "#/definitions/Review"
      lastModifiedDate:
        type: "string"
        format: "date-time"
    example:
      id: "1"
      name: "ASUS ZENBOOK UX305FA"
      type: "notebook"
      reviews:
      - text: "Not Bad"
        userId: "1"
      - text: "Not Bad"
        userId: "1"
      lastModifiedDate: "2017-11-21 20:08:28.395Z"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      type:
        type: "string"
      lastModifiedDate:
        type: "string"
        format: "date-time"
    example:
      id: "1"
      name: "Vasya"
      surname: "Ivanov"
      email: "vasya_ivanov@epam.com"
      password: "Password12345"
      type: "admin"
      lastModifiedDate: "2017-11-21 20:08:28.395Z"
  City:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      country:
        type: "string"
      capital:
        type: "boolean"
      location:
        $ref: "#/definitions/City_location"
      lastModifiedDate:
        type: "string"
    example:
      id: "1"
      name: "Brest"
      country: "Belarus"
      capital: false
      location:
        lat: "52.097621"
        long: "23.73405"
      lastModifiedDate: "2017-11-21 20:08:28.395Z"
  City_location:
    properties:
      lat:
        type: "string"
      long:
        type: "string"
    example:
      lat: "52.097621"
      long: "23.73405"